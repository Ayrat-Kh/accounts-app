basePath: /
definitions:
  auth.GoogleLoginRequest:
    properties:
      idToken:
        type: string
    required:
    - idToken
    type: object
  auth.UserLoginResult:
    properties:
      accessToken:
        type: string
      sessionToken:
        type: string
      user:
        $ref: '#/definitions/user.UserDto'
    required:
    - accessToken
    - sessionToken
    - user
    type: object
  expenses.ExpenseDto:
    properties:
      category:
        type: string
      coord:
        $ref: '#/definitions/expenses.GeoCoord'
      createdAt:
        type: integer
      currencyCode:
        type: string
      date:
        type: string
      details:
        items:
          $ref: '#/definitions/expenses.ExpenseItemDto'
        type: array
      id:
        type: string
      name:
        type: string
      total:
        type: number
      updatedAt:
        type: integer
      userId:
        type: string
    required:
    - category
    - createdAt
    - currencyCode
    - details
    - id
    - name
    - total
    - updatedAt
    - userId
    type: object
  expenses.ExpenseItemDto:
    properties:
      currencyCode:
        type: string
      name:
        type: string
      price:
        type: number
    required:
    - currencyCode
    - name
    - price
    type: object
  expenses.ExpenseResult:
    properties:
      expense:
        $ref: '#/definitions/expenses.ExpenseDto'
    required:
    - expense
    type: object
  expenses.ExpenseUpsertDto:
    properties:
      category:
        type: string
      currencyCode:
        type: string
      details:
        items:
          $ref: '#/definitions/expenses.ExpenseItemDto'
        type: array
      name:
        type: string
      total:
        type: number
    required:
    - category
    - currencyCode
    - details
    - name
    - total
    type: object
  expenses.ExpensesResult:
    properties:
      expenses:
        items:
          $ref: '#/definitions/expenses.ExpenseDto'
        type: array
      paginationResult:
        $ref: '#/definitions/helpers.PaginationResult'
    required:
    - expenses
    - paginationResult
    type: object
  expenses.GeoCoord:
    properties:
      lat:
        type: number
      lng:
        type: number
    type: object
  helpers.ErrorResponse:
    properties:
      code:
        type: string
      message:
        type: string
    required:
    - code
    - message
    type: object
  helpers.PaginationResult:
    properties:
      currentPage:
        type: integer
      itemsPerPage:
        type: integer
      totalPages:
        type: integer
    required:
    - currentPage
    - itemsPerPage
    - totalPages
    type: object
  user.UpdateUserDto:
    properties:
      alias:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      settings:
        $ref: '#/definitions/user.UserSettingsDb'
    required:
    - settings
    type: object
  user.UserDto:
    properties:
      alias:
        type: string
      email:
        type: string
      firstName:
        type: string
      googleId:
        type: string
      id:
        type: string
      lastName:
        type: string
      settings:
        $ref: '#/definitions/user.UserSettingsDto'
    required:
    - email
    - id
    - settings
    type: object
  user.UserResult:
    properties:
      user:
        $ref: '#/definitions/user.UserDto'
    required:
    - user
    type: object
  user.UserSettingsDb:
    properties:
      defaultCurrency:
        type: string
    type: object
  user.UserSettingsDto:
    properties:
      defaultCurrency:
        type: string
    type: object
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Expenso-app API
  version: "1.0"
paths:
  /login/google-auth:
    post:
      consumes:
      - application/json
      description: Google auth verification
      parameters:
      - description: Google login request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/auth.GoogleLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.UserLoginResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ErrorResponse'
      summary: Google auth login
      tags:
      - auth
  /v1/expenses:
    get:
      consumes:
      - application/json
      description: Get expenses for the logged in user
      parameters:
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      - description: page or 1 by default
        in: query
        name: page
        required: true
        type: integer
      - description: pageSize or 300 by default
        in: query
        name: pageSize
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/expenses.ExpensesResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ErrorResponse'
      summary: Get expenses for the logged in user
      tags:
      - expenses
    post:
      consumes:
      - application/json
      description: Create an expense for a logged in user
      parameters:
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      - description: Update expense model
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/expenses.ExpenseUpsertDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/expenses.ExpenseResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ErrorResponse'
      summary: Create an expense for a logged in user
      tags:
      - expenses
  /v1/expenses/{expenseId}:
    get:
      consumes:
      - application/json
      description: Get expense by expenseId
      parameters:
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      - description: :expenseId
        in: path
        name: expenseId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/expenses.ExpenseResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ErrorResponse'
      summary: Get expense by expenseId
      tags:
      - expenses
    put:
      consumes:
      - application/json
      description: Update an expense for a logged in user
      parameters:
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      - description: :expenseId
        in: path
        name: expenseId
        required: true
        type: string
      - description: Update expense model
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/expenses.ExpenseUpsertDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/expenses.ExpenseResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ErrorResponse'
      summary: Update an expense for a logged in user
      tags:
      - expenses
  /v1/users/:userId:
    put:
      consumes:
      - application/json
      description: Update user info
      parameters:
      - description: User update data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ErrorResponse'
      summary: Update user info
      tags:
      - user
  /v1/users/{userId}:
    get:
      description: Get user info
      parameters:
      - description: Bearer
        in: header
        name: Authorization
        required: true
        type: string
      - description: uuid or me - to get info for the logged in user
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.UserResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/helpers.ErrorResponse'
      summary: Get user info
      tags:
      - user
swagger: "2.0"
